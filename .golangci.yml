# golangci-lint configuration
# https://golangci-lint.run/usage/configuration/

run:
  # Timeout for running linters, e.g. 30s, 5m, default is 1m
  timeout: 5m
  # Include test files or not, default is true
  tests: true
  # Default concurrency is a available CPU number
  concurrency: 4
  # Allow multiple parallel golangci-lint instances running, default is false
  allow-parallel-runners: false

# Output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number
  # Print lines of code with issue, default is true
  print-issued-lines: true
  # Print linter name in the end of issue text, default is true
  print-linter-name: true

# All available settings of specific linters
linters-settings:
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    check-type-assertions: true
  govet:
    # Report about shadowed variables
    check-shadowing: true
  gocyclo:
    # Minimal code complexity to report, 30 by default
    min-complexity: 15
  dupl:
    # Tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # Minimal length of string constant, 3 by default
    min-len: 3
    # Minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  misspell:
    # Correct spellings using locale preferences for US or UK.
    locale: US
  lll:
    # Max line length, lines longer will be reported. Default is 120.
    line-length: 120
  unused:
    # Treat code as a program (not a library) and report unused exported identifiers
    check-exported: false
  unparam:
    # Inspect exported functions, default is false
    check-exported: false
  nakedret:
    # Make an issue if func has more lines of code than this setting and it has naked returns
    max-func-lines: 30
  prealloc:
    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them
    simple: true
    range-loops: true # Report preallocation suggestions on range loops
    for-loops: false # Report preallocation suggestions on for loops

linters:
  enable:
    - errcheck     # Detect unchecked errors
    - gosimple     # Simplify code
    - govet        # Examine Go source code and reports suspicious constructs
    - ineffassign  # Detect when assignments to existing variables are not used
    - staticcheck  # Go static analysis
    - typecheck    # Like the front-end of a Go compiler
    - unused       # Check for unused constants, variables, functions and types
    - gocyclo      # Computes and checks the cyclomatic complexity of functions
    - gosec        # Inspects source code for security problems
    - misspell     # Finds commonly misspelled English words in comments
    - nakedret     # Finds naked returns in functions greater than a specified function length
    - prealloc     # Finds slice declarations that could potentially be preallocated
    - exportloopref # Checks for pointers to enclosing loop variables
    - gocritic     # Provides diagnostics that check for bugs, performance and style issues
  disable:
    - gofmt        # Using gofumpt instead
    - goimports    # Using gofumpt instead
  fast: false

issues:
  # Maximum issues count per one linter. Set to 0 to disable
  max-issues-per-linter: 0
  # Maximum count of issues with the same text
  max-same-issues: 0
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
    # Exclude known linters from partially hard-vendored code
    - path: internal/.*
      text: "exported: type name will be used as"
      linters:
        - golint
    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA1019:"  # Deprecation warnings
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "