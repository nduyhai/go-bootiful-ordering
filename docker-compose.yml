services:
  postgres:
    image: postgres:latest
    container_name: go-bootiful-ordering-postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: orders
    ports:
      - "5432:5432"
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d orders"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: go-bootiful-ordering-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  tempo:
    image: grafana/tempo:latest
    container_name: go-bootiful-ordering-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/monitoring/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200"  # tempo
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
      - "9411:9411"  # zipkin
      - "6831:6831/udp" # jaeger thrift compact
      - "6832:6832/udp" # jaeger thrift binary
      - "14268:14268" # jaeger http

  prometheus:
    image: prom/prometheus:latest
    container_name: go-bootiful-ordering-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  pyroscope:
    image: pyroscope/pyroscope:latest
    container_name: go-bootiful-ordering-pyroscope
    ports:
      - "4040:4040"
    command:
      - "server"
    volumes:
      - pyroscope-data:/var/lib/pyroscope
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4040"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    container_name: go-bootiful-ordering-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./config/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./config/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      - pyroscope
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-bootiful-ordering-order
    command: ["./bin/order"]
    ports:
      - "8084:8084"
      - "9094:9094"
    volumes:
      - ./config:/app/config
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=myuser
      - DB_PASSWORD=secret
      - DB_NAME=orders
      - DB_SSLMODE=disable
      - TEMPO_HOST=tempo
      - TEMPO_PORT=4317
      - PYROSCOPE_HOST=pyroscope
      - PYROSCOPE_PORT=4040
    depends_on:
      postgres:
        condition: service_healthy
      tempo:
        condition: service_started
      prometheus:
        condition: service_healthy
      pyroscope:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  product:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-bootiful-ordering-product
    command: ["./bin/product"]
    ports:
      - "8081:8081"
      - "9091:9091"
    volumes:
      - ./config:/app/config
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=myuser
      - DB_PASSWORD=secret
      - DB_NAME=products
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - TEMPO_HOST=tempo
      - TEMPO_PORT=4317
      - PYROSCOPE_HOST=pyroscope
      - PYROSCOPE_PORT=4040
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      tempo:
        condition: service_started
      prometheus:
        condition: service_healthy
      pyroscope:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: go-bootiful-ordering-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: go-bootiful-ordering-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  debezium:
    image: debezium/connect:3.0.0.Final
    container_name: go-bootiful-ordering-debezium
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      BOOTSTRAP_SERVERS: kafka:9092
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  grafana-storage:
  pyroscope-data:
